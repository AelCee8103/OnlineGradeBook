// ClassAdvisory.jsx

import React, { useState, useEffect, useCallback, useRef } from "react";
import { useNavigate } from "react-router-dom";
import NavbarFaculty from "../Components/NavbarFaculty";
import FacultySidePanel from "../Components/FacultySidePanel";
import axios from "axios";
import { faMagnifyingGlass } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Dialog } from "@headlessui/react";
import { useSocket } from '../context/SocketContext'; // Use the socket from context
import NotificationDropdown from "../Components/NotificationDropdown";

// Add this helper function at the top of the file, outside the component
const getStoredValidationStatus = (advisoryID) => {
  try {
    const allStatuses = JSON.parse(localStorage.getItem('validationStatuses')) || {};
    return allStatuses[advisoryID] || {
      hasPendingRequest: false,
      isApproved: false,
      isRejected: false,
      lastRequestDate: null
    };
  } catch (error) {
    console.error('Error parsing stored validation status:', error);
    return {
      hasPendingRequest: false,
      isApproved: false,
      isRejected: false,
      lastRequestDate: null
    };
  }
};

const ClassAdvisory = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isValidating, setIsValidating] = useState(false);
  const [advisoryData, setAdvisoryData] = useState({
    grade: "",
    section: "",
    advisorName: "Not Assigned",
    schoolYear: "",
    advisoryID: null
  });
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState("");
  const [studentModalOpen, setStudentModalOpen] = useState(false);
  const [selectedStudentInfo, setSelectedStudentInfo] = useState(null);
  const [lastRequestDate, setLastRequestDate] = useState(null);
  const [validationStatus, setValidationStatus] = useState(() => 
    getStoredValidationStatus(localStorage.getItem('currentAdvisoryID'))
  );
  const studentsPerPage = 5;
  const navigate = useNavigate();
  const socket = useSocket(); // Use the socket from context
  const currentAdvisoryIDRef = useRef(null);

  const fetchAdvisoryData = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");
      if (!token) return navigate("/faculty-login");

      const { data } = await axios.get(
        "http://localhost:3000/auth/faculty-class-advisory",
        {
          headers: { Authorization: `Bearer ${token}` },
          timeout: 10000,
        }
      );

      if (data.message === "No advisory class assigned") {
        setAdvisoryData({
          grade: "",
          section: "",
          advisorName: data.advisorName || "Not Assigned",
          advisoryID: null
        });
        setStudents([]);
        setError("No advisory class assigned to you");
        return;
      }

      if (!data.grade || !data.section)
        throw new Error("Incomplete advisory data received");

      // Store the advisory ID
      localStorage.setItem('currentAdvisoryID', data.advisoryID);
      currentAdvisoryIDRef.current = data.advisoryID;

      setAdvisoryData({
        grade: data.grade,
        section: data.section,
        advisorName: data.advisorName,
        advisoryID: data.advisoryID
      });

      // Load the stored validation status for this advisory
      const storedStatus = getStoredValidationStatus(data.advisoryID);
      setValidationStatus(storedStatus);

      setStudents(data.students || []);
    } catch (err) {
      const msg =
        err.response?.data?.message || err.message.includes("timeout")
          ? "Request timed out. Please try again."
          : "Failed to load advisory data";

      setError(msg);
      if (err.response?.status === 401) navigate("/faculty-login");
    } finally {
      setLoading(false);
    }
  };

  const checkValidationStatus = useCallback(async () => {
    try {
      if (!advisoryData.advisoryID) return;

      const token = localStorage.getItem("token");
      const response = await axios.get(
        `http://localhost:3000/Pages/faculty/check-pending-request/${advisoryData.advisoryID}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

     if (response.data.success && response.data.status !== null) {
        const newStatus = {
          hasPendingRequest: response.data.status === 'pending',
          isApproved: response.data.status === 'approved',
          isRejected: response.data.status === 'rejected',
          lastRequestDate: response.data.lastRequestDate
        };

        const allStatuses = JSON.parse(localStorage.getItem('validationStatuses')) || {};
        allStatuses[advisoryData.advisoryID] = newStatus;
        localStorage.setItem('validationStatuses', JSON.stringify(allStatuses));

        setValidationStatus(newStatus);
      } else {
        // Reset to initial state (no validation ever done)
        const cleanStatus = {
          hasPendingRequest: false,
          isApproved: false,
          isRejected: false,
          lastRequestDate: null
        };
        const allStatuses = JSON.parse(localStorage.getItem('validationStatuses')) || {};
        allStatuses[advisoryData.advisoryID] = cleanStatus;
        localStorage.setItem('validationStatuses', JSON.stringify(allStatuses));
        setValidationStatus(cleanStatus);
      }
    } catch (error) {
      console.error("Error checking validation status:", error);
      // On error, use cached status
      const cachedStatus = getStoredValidationStatus(advisoryData.advisoryID);
      setValidationStatus(cachedStatus);
    }
  }, [advisoryData.advisoryID]);

  useEffect(() => {
    fetchAdvisoryData();
  }, []);

  useEffect(() => {
    checkValidationStatus();
    const interval = setInterval(checkValidationStatus, 30000); // Check every 30 seconds

    return () => clearInterval(interval);
  }, [checkValidationStatus]);

  // ClassAdvisory.jsx - Add this effect
  useEffect(() => {
    if (!socket) return;

    const facultyID = localStorage.getItem('facultyID');
    const facultyName = localStorage.getItem('facultyName');

    if (facultyID && facultyName) {
      socket.emit('authenticate', {
        userType: 'faculty',
        userID: facultyID,
        facultyName: facultyName
      });
    }
  }, [socket]);

  // Real-time: Listen for validation status, student assignment, and approval changes
  useEffect(() => {
    if (!socket || !advisoryData.advisoryID) return;

    // Handle validation status/approval changes
    const handleValidationResponse = (data) => {
      const matches = (
        (data.requestID && String(data.requestID) === String(advisoryData.advisoryID)) ||
        (data.advisoryID && String(data.advisoryID) === String(advisoryData.advisoryID))
      );
      if (matches) {
        const newStatus = {
          hasPendingRequest: false,
          isApproved: data.status === 'approved',
          isRejected: data.status === 'rejected',
          lastRequestDate: new Date().toISOString()
        };
        const allStatuses = JSON.parse(localStorage.getItem('validationStatuses')) || {};
        allStatuses[advisoryData.advisoryID] = newStatus;
        localStorage.setItem('validationStatuses', JSON.stringify(allStatuses));
        setValidationStatus(newStatus);
        
        // Update the validation status message element
        const statusElement = document.getElementById('validation-status-message');
        if (statusElement) {
          if (data.status === 'approved') {
            statusElement.textContent = 'Your grades have been validated successfully.';
            statusElement.className = 'text-green-600 font-medium mt-2';
          } else if (data.status === 'rejected') {
            statusElement.textContent = 'Your validation request has been rejected. Please visit the office for details.';
            statusElement.className = 'text-red-600 font-medium mt-2';
          }
        }
      }
    };

    // Handle real-time student assignment changes
    const handleStudentAssignmentUpdate = (data) => {
      if (data.advisoryID && String(data.advisoryID) === String(advisoryData.advisoryID)) {
        setStudents(data.students || []);
        
        // Update UI element instead of toast
        const statusElement = document.getElementById('validation-status-message');
        if (statusElement) {
          statusElement.textContent = 'Student list has been updated in real time!';
          statusElement.className = 'text-blue-600 font-medium mt-2';
          // Clear the message after 5 seconds
          setTimeout(() => {
            if (statusElement) {
              statusElement.textContent = '';
            }
          }, 5000);
        }
      }
    };

    socket.on('validationResponseReceived', handleValidationResponse);
    socket.on('validationStatusUpdate', handleValidationResponse);
    socket.on('studentAssignmentUpdate', handleStudentAssignmentUpdate);

    return () => {
      socket.off('validationResponseReceived', handleValidationResponse);
      socket.off('validationStatusUpdate', handleValidationResponse);
      socket.off('studentAssignmentUpdate', handleStudentAssignmentUpdate);
    };
  }, [socket, advisoryData.advisoryID]);

  // On mount, always load the latest status from localStorage
  useEffect(() => {
    if (advisoryData.advisoryID) {
      setValidationStatus(getStoredValidationStatus(advisoryData.advisoryID));
    }
  }, [advisoryData.advisoryID]);

  useEffect(() => {
    return () => {
      // Keep validation statuses in localStorage even after logout
      // They will be cleared only when explicitly needed
      const currentAdvisoryID = currentAdvisoryIDRef.current;
      if (currentAdvisoryID) {
        const allStatuses = JSON.parse(localStorage.getItem('validationStatuses')) || {};
        allStatuses[currentAdvisoryID] = validationStatus;
        localStorage.setItem('validationStatuses', JSON.stringify(allStatuses));
      }
    };
  }, [validationStatus]);

  const fetchStudentDetails = async (studentId) => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `http://localhost:3000/Pages/students/${studentId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setSelectedStudentInfo({
        ...response.data,
        grade: advisoryData.grade,
        section: advisoryData.section,
      });
      setStudentModalOpen(true);
    } catch (error) {
      console.error("Error fetching student details:", error);
      // Using alert instead of toast since toast may not be defined
      alert("Failed to fetch student details");
    }
  };

  // Validate grades function to submit grade validation request to admin
  const handleValidateGrades = async () => {
    try {
      setIsValidating(true);
      const token = localStorage.getItem("token");
      const facultyID = localStorage.getItem("facultyID");
      const facultyName = localStorage.getItem("facultyName");

      if (!token) {
        // Replace toast with alert for critical errors only
        alert("Authentication token missing. Please log in again.");
        navigate("/faculty-login");
        return;
      }

      // Check if there's already a pending request
      if (validationStatus.hasPendingRequest) {
        alert("You already have a pending validation request. Please wait for admin approval.");
        setIsValidating(false);
        return;
      }

      const response = await axios.post(
        "http://localhost:3000/Pages/faculty/validate-grades",
        { 
          advisoryID: advisoryData.advisoryID,
          facultyID: facultyID,
          grade: advisoryData.grade,
          section: advisoryData.section
        },
        { 
          headers: { 
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
          } 
        }
      );

      if (response.data.success && socket) {
        // Create real-time request data with rich details
        const requestData = {
          requestID: response.data.requestID,
          facultyID: facultyID,
          facultyName: facultyName,
          grade: advisoryData.grade,
          section: advisoryData.section,
          advisoryID: advisoryData.advisoryID,
          timestamp: new Date().toISOString()
        };      
        // Send the validation request via socket for real-time notification
        socket.emit('validationRequest', requestData);

        // Update local validation status
        const newStatus = {
          hasPendingRequest: true,
          isApproved: false,
          isRejected: false,
          lastRequestDate: new Date().toISOString(),
          requestID: response.data.requestID
        };

        // Save to localStorage and update state
        const allStatuses = JSON.parse(localStorage.getItem('validationStatuses')) || {};
        allStatuses[advisoryData.advisoryID] = newStatus;
        localStorage.setItem('validationStatuses', JSON.stringify(allStatuses));
        setValidationStatus(newStatus);
        
        // Add a visual feedback element instead of toast
        const statusElement = document.getElementById('validation-status-message');
        if (statusElement) {
          statusElement.textContent = 'Validation request sent successfully. Awaiting admin approval.';
          statusElement.className = 'text-yellow-600 font-medium mt-2';
        }      
        // Success notification is handled by the notification dropdown component
      }
    } catch (error) {
      handleValidationError(error);
    } finally {
      setIsValidating(false);
    }
  };

  const handleValidationError = (error) => {
    // Update the validation status message element with error details
    const statusElement = document.getElementById('validation-status-message');
    if (statusElement) {
      statusElement.className = 'text-red-600 font-medium mt-2';
      
      if (error.response?.status === 403) {
        statusElement.textContent = "You don't have permission to perform this action";
      } else if (error.response?.status === 400 && error.response.data.message.includes("pending")) {
        statusElement.textContent = "You already have a pending validation request";
      } else if (error.response?.data?.message) {
        statusElement.textContent = error.response.data.message;
      } else {
        statusElement.textContent = "Error submitting validation request. Please try again later.";
      }
    }
    
    // Only use alert for critical issues
    if (error.response?.status === 401) {
      alert("Your session has expired. Please log in again.");
      navigate("/faculty-login");
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const filteredStudents = students.filter(
    (student) =>
      student.StudentID.toString().includes(searchTerm) ||
      student.LastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      student.FirstName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const currentStudents = filteredStudents.slice(
    (currentPage - 1) * studentsPerPage,
    currentPage * studentsPerPage
  );
  const totalPages = Math.ceil(filteredStudents.length / studentsPerPage);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1);
  };

  const formatName = (last, first, middle) =>
    `${last}, ${first}${middle ? ` ${middle.charAt(0)}.` : ""}`;

  // Create a renderContent function to handle different states
  const renderContent = () => {
    if (loading) {
      return (
        <div className="flex flex-col items-center justify-center h-full py-12">
          <div className="h-10 w-10 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
          <p className="mt-4 text-lg text-gray-600">Loading advisory class...</p>
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex flex-col items-center justify-center h-full py-12 text-red-500">
          <p className="mb-4 text-lg">{error}</p>
          <button
            onClick={
              error === "No advisory class assigned to you"
                ? () => navigate("/faculty-dashboard")
                : fetchAdvisoryData
            }
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded transition"
          >
            {error === "No advisory class assigned to you"
              ? "Back to Dashboard"
              : "Retry"}
          </button>
        </div>
      );
    }

    // Return the normal content when there's no loading or error
    return (
      <>
        <h1 className="text-2xl font-bold text-gray-800">Class Advisory</h1>

        <div className="bg-white rounded-xl shadow p-6 border border-gray-200">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div>
              <p className="text-sm text-gray-500">Grade</p>
              <p className="text-lg font-semibold">
                {advisoryData.grade || "N/A"}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Section</p>
              <p className="text-lg font-semibold">
                {advisoryData.section || "N/A"}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Advisor</p>
              <p className="text-lg font-semibold">
                {advisoryData.advisorName}
              </p>
            </div>
          </div>
          {lastRequestDate && (
            <div className="mt-4">
              <p className="text-sm text-gray-500">Last Validation Request</p>
              <p className="text-lg font-semibold">
                {formatDate(lastRequestDate)}
              </p>
            </div>
          )}
          <div className="mt-4 border-t pt-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-500">Validation Status</p>
                <div className="flex items-center space-x-2">
                  <div className={`w-3 h-3 rounded-full ${
                    validationStatus.hasPendingRequest ? 'bg-yellow-400' :
                    validationStatus.isApproved ? 'bg-green-400' :
                    validationStatus.isRejected ? 'bg-red-400' :
                    'bg-blue-400'
                  }`} />
                  <p className="text-lg font-semibold">
                    {validationStatus.hasPendingRequest ? (
                      <span className="text-yellow-600">Pending Approval</span>
                    ) : validationStatus.isApproved ? (
                      <span className="text-green-600">Approved</span>
                    ) : validationStatus.isRejected ? (
                      <span className="text-red-600">Rejected</span>
                    ) : (
                      <span className="text-blue-600">Ready for Validation</span>
                    )}
                  </p>
                </div>
                <div id="validation-status-message" className="text-sm mt-2"></div>
                {validationStatus.lastRequestDate && (
                  <p className="text-sm text-gray-500 mt-1">
                    Last Request: {formatDate(validationStatus.lastRequestDate)}
                  </p>
                )}
              </div>
              <button 
                onClick={handleValidateGrades}
                disabled={isValidating || validationStatus.hasPendingRequest || validationStatus.isApproved}
                className={`px-4 py-2 rounded-md transition ${
                  isValidating || validationStatus.hasPendingRequest || validationStatus.isApproved
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-green-700 hover:bg-green-800 text-white"
                }`}
              >
                {isValidating ? "Submitting..." : "Validate Grades"}
              </button>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl shadow border border-gray-200">
          <div className="flex items-center justify-between p-4 border-b">
            <div className="relative w-full max-w-md">
              <FontAwesomeIcon
                icon={faMagnifyingGlass}
                className="absolute top-1/2 left-3 -translate-y-1/2 text-gray-400"
              />
              <input
                type="text"
                placeholder="Search by ID or name"
                value={searchTerm}
                onChange={handleSearchChange}
                className="w-full pl-10 pr-4 py-2 rounded-md border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              />
            </div>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="text-sm text-center font-semibold px-4 py-2">
                    No.
                  </th>
                  <th className="text-sm font-semibold text-left px-6 py-2">
                    Student Name
                  </th>
                  <th className="text-sm font-semibold text-left px-6 py-2">
                    Student Number
                  </th>
                  <th className="text-sm font-semibold text-center px-6 py-2">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-100">
                {currentStudents.length ? (
                  currentStudents.map((student, idx) => (
                    <tr key={student.StudentID}>
                      <td className="text-center text-sm px-4 py-2">
                        {idx + 1 + (currentPage - 1) * studentsPerPage}
                      </td>
                      <td className="text-sm px-6 py-2">
                        {formatName(
                          student.LastName,
                          student.FirstName,
                          student.MiddleName
                        )}
                      </td>
                      <td className="text-sm px-6 py-2">{student.StudentID}</td>
                      <td className="px-6 py-2 flex justify-center gap-2">
                        <button
                          onClick={() => fetchStudentDetails(student.StudentID)}
                          className="bg-blue-500 hover:bg-blue-700 text-white text-sm px-3 py-1 rounded-md"
                        >
                          View
                        </button>
                        <button
                          onClick={() =>
                            navigate(`/faculty/students/${student.StudentID}/grades`)
                          }
                          className="bg-green-500 hover:bg-green-700 text-white text-sm px-3 py-1 rounded-md"
                        >
                          Grades
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="4" className="text-center py-4 text-gray-500">
                      No students found
                    </td>
                  </tr>
                )}
              </tbody>
            </table>

            {/* Pagination Controls */}
            {currentStudents.length > 0 && (
              <div className="flex items-center justify-between px-4 py-3 border-t">
                <button
                  onClick={() => setCurrentPage((p) => Math.max(1, p - 1))}
                  disabled={currentPage === 1}
                  className={`px-4 py-2 text-sm rounded-md border ${
                    currentPage === 1
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-white hover:bg-gray-100"
                  }`}
                >
                  Previous
                </button>
                
                <span className="text-sm text-gray-700">
                  Page <strong>{currentPage}</strong> of <strong>{totalPages}</strong>
                </span>
                
                <button
                  onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))}
                  disabled={currentPage === totalPages}
                  className={`px-4 py-2 text-sm rounded-md border ${
                    currentPage === totalPages
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-white hover:bg-gray-100"
                  }`}
                >
                  Next
                </button>
              </div>
            )}
          </div>
        </div>
      </>
    );
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Toaster removed - notifications now handled by NotificationDropdown */}
      <FacultySidePanel
        isSidebarOpen={isSidebarOpen}
        toggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)}
      />

      <div className="flex-1 flex flex-col overflow-auto">
        <NavbarFaculty toggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)} />
        
        <main className="p-6 sm:p-8 space-y-6">
          {renderContent()}
        </main>
      </div>

      <Dialog
        open={studentModalOpen}
        onClose={() => setStudentModalOpen(false)}
      >
        <div className="fixed inset-0 bg-black/30" aria-hidden="true" />
        <div className="fixed inset-0 flex items-center justify-center p-4">
          <Dialog.Panel className="bg-white rounded-xl w-full max-w-md p-6">
            <Dialog.Title className="text-lg font-semibold mb-4">
              Student Information
            </Dialog.Title>

            {selectedStudentInfo && (
              <div className="bg-gray-50 p-4 rounded-lg">
                <div className="space-y-2">
                  <div>
                    <p className="text-sm text-gray-500">Student ID</p>
                    <p className="font-medium">
                      {selectedStudentInfo.StudentID}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Full Name</p>
                    <p className="font-medium">
                      {`${selectedStudentInfo.FirstName} ${selectedStudentInfo.MiddleName} ${selectedStudentInfo.LastName}`}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500">Grade & Section</p>
                    <p className="font-medium">
                      {`Grade ${selectedStudentInfo.grade} - ${selectedStudentInfo.section}`}
                    </p>
                  </div>
                </div>
              </div>
            )}

            <div className="mt-6 flex justify-end">
              <button
                onClick={() => setStudentModalOpen(false)}
                className="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
              >
                Close
              </button>
            </div>
          </Dialog.Panel>
        </div>
      </Dialog>
    </div>
  );
};

export default ClassAdvisory;